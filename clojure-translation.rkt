#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 7 #"Monaco\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 1059 0 27 3 17 #"#lang racket/base"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 14 3 11 #"racket/list"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 58
#";; written in Clojure by Andy Fingerhut & Stuart Halloway."
0 0 4 29 1 #"\n"
0 0 17 3 28 #";; translated here to Racket"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 4 3 1 #" "
0 0 14 3 4 #"perm"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 6 #"perm-p"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 6 #"perm-s"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 6 #"perm-c"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 10 #"print-perm"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 17 #"init-permutations"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 16 #"next-permutation"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #";; initialize the permutation generation algorithm.  The permutation"
 #"s"
) 0 0 4 29 1 #"\n"
0 0 17 3 70
(
 #";; need to be generated in a particular order so that the checksum m"
 #"ay"
) 0 0 4 29 1 #"\n"
0 0 17 3 61
#";; be computed correctly (or if you can determine some way to"
0 0 4 29 1 #"\n"
0 0 17 3 65
#";; calculate the sign from an arbitrary permutation, then you can"
0 0 4 29 1 #"\n"
0 0 17 3 52 #";; generate the permutations in any order you wish)."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 68
#";; With the particular order of generating permutations used in this"
0 0 4 29 1 #"\n"
0 0 17 3 67
(
 #";; program, it turns out that each of the n consecutive \"groups\" o"
 #"f"
) 0 0 4 29 1 #"\n"
0 0 17 3 68
#";; (n-1)!  permutations begin with these permutations (example given"
0 0 4 29 1 #"\n"
0 0 17 3 12 #";; for n=6):"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #";;   1st permutation: 1 2 3 4 5 6    sign: 1  count vals: 1 2 3 4 5 "
 #"6"
) 0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #";; 121st permutation: 2 3 4 5 6 1    sign: 1  count vals: 1 2 3 4 5 "
 #"5"
) 0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #";; 241st permutation: 3 4 5 6 1 2    sign: 1  count vals: 1 2 3 4 5 "
 #"4"
) 0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #";; 361st permutation: 4 5 6 1 2 3    sign: 1  count vals: 1 2 3 4 5 "
 #"3"
) 0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #";; 481st permutation: 5 6 1 2 3 4    sign: 1  count vals: 1 2 3 4 5 "
 #"2"
) 0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #";; 601st permutation: 6 1 2 3 4 5    sign: 1  count vals: 1 2 3 4 5 "
 #"1"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 67
#";; This makes it very easy to divide the work into n parallel tasks"
0 0 4 29 1 #"\n"
0 0 17 3 70
(
 #";; that each start at one of the permutations above, and generate on"
 #"ly"
) 0 0 4 29 1 #"\n"
0 0 17 3 68
#";; (n-1)! permutations each.  Then combine the checksum and maxflips"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";; values of each thread and print."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 55 #"; just holds a permutation: state, sign and count array"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 4 #"perm"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"print-perm"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 14 #"\"~a\\t~a\\t~a\\n\""
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"perm-p"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"perm"
0 0 14 3 2 #"-s"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"perm"
0 0 14 3 2 #"-c"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 39 #"; initializes n-1 permutations as above"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 17 #"init-permutations"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 20 #"; TODO: unit tests  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 23 3 2 #"(["
0 0 14 3 3 #"n-1"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"ip-iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 3 #"all"
0 0 23 3 1 #")"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 14 3 3 #"all"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 23 3 2 #"(["
0 0 14 3 2 #"p2"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 19 #"rotate-left-first-n"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 23 3 1 #"["
0 0 14 3 2 #"c2"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"sub1-at-index"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 3 #"n-1"
0 0 23 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 7 #"ip-iter"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"add1"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 25 3 1 #" "
0 0 14 3 2 #"p2"
0 0 4 3 1 #" "
0 0 14 3 2 #"c2"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 14 3 3 #"all"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"perm"
0 0 4 3 1 #" "
0 0 14 3 2 #"p2"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 2 #"c2"
0 0 23 3 7 #")))))))"
0 0 25 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 23 3 2 #"(["
0 0 14 3 2 #"p0"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 4 #")))]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 23 3 1 #"["
0 0 14 3 2 #"c0"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 5 #")))])"
0 0 4 3 13 #"             "
0 0 25 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 7 #"ip-iter"
0 0 25 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 2 #"p0"
0 0 4 3 1 #" "
0 0 14 3 2 #"c0"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"perm"
0 0 4 3 1 #" "
0 0 14 3 2 #"p0"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 2 #"c0"
0 0 23 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 81
(
 #"; return list that is identical to lst but with 1 subtracted from th"
 #"e nth element"
) 0 0 4 29 1 #"\n"
0 0 17 3 48 #"; (-> (listof number?) number? (listof number?))"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"sub1-at-index"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 4 3 1 #" "
0 0 14 3 5 #"index"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 14 #"apply-to-index"
0 0 4 3 1 #" "
0 0 14 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 4 3 1 #" "
0 0 14 3 5 #"index"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"add1-at-index"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 4 3 1 #" "
0 0 14 3 5 #"index"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 14 #"apply-to-index"
0 0 4 3 1 #" "
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 4 3 1 #" "
0 0 14 3 5 #"index"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"apply-to-index"
0 0 25 3 1 #" "
0 0 14 3 4 #"proc"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 23 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 38 #"; TODO: this could be optimized easily"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 22 #"; TODO: unit tests    "
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"take"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 23 3 1 #")"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"proc"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 23 3 3 #")))"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 4 #"drop"
0 0 25 3 1 #" "
0 0 14 3 3 #"lst"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"add1"
0 0 25 3 1 #" "
0 0 14 3 5 #"index"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"set-at-index"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 4 3 1 #" "
0 0 14 3 5 #"index"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"take"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 4 3 1 #" "
0 0 14 3 5 #"index"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 4 #"drop"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 5 #"index"
0 0 23 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 49 #"; (-> (listof number?) number? (listof number?)) "
0 0 25 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 19 #"rotate-left-first-n"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 25 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 31 #"; TODO: this could be optimized"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 18 #"; TODO: unit tests"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"take"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"drop"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 50 #"; returns array but with swapped values at indices"
0 0 4 29 1 #"\n"
0 0 17 3 72
(
 #"; (-> list? exact-nonnegative-integer? exact-nonnegative-integer? li"
 #"st?)"
) 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"swap-at-indices"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 39 #"; TODO: i think this could be optimized"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 18 #"; TODO: unit tests"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 4 #"let*"
0 0 4 3 1 #" "
0 0 23 3 2 #"(["
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"min"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 23 3 1 #"["
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"max"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 23 3 1 #"["
0 0 14 3 4 #"head"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"take"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 23 3 1 #"["
0 0 14 3 6 #"middle"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"drop"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"take"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 23 3 1 #"["
0 0 14 3 3 #"end"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"drop"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 4 #"))])"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 14 3 4 #"head"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 14 3 6 #"middle"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 14 3 3 #"end"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 1 #"6"
0 0 17 3 1 #" "
0 0 17 3 3 #"7))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 15 #"swap-at-indices"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 2 #"1)"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 15 #"swap-at-indices"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 2 #"6)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 63
#";; Modify the passed Java arrays p (a permutation) and c (count"
0 0 4 29 1 #"\n"
0 0 17 3 60
#";; values) in place.  Let caller negate the sign themselves."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #";; Return true if the final value of p is a new permutation, false i"
 #"f"
) 0 0 4 29 1 #"\n"
0 0 17 3 67
#";; there are no more permutations and the caller should not use the"
0 0 4 29 1 #"\n"
0 0 17 3 27 #";; value of p for anything."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7        1279 4           0 0           0 212 0 23 3 1 #"("
0 0 15 3 4 #"defn"
0 0 2 3 1 #" "
0 0 14 3 17 #"next-permutation!"
0 0 2 3 1 #" "
0 0 23 3 1 #"["
0 0 14 3 1 #"N"
0 0 2 3 1 #" "
0 0 25 3 6 #"#^ints"
0 0 2 3 1 #" "
0 0 14 3 1 #"p"
0 0 2 3 1 #" "
0 0 14 3 4 #"sign"
0 0 2 3 1 #" "
0 0 25 3 6 #"#^ints"
0 0 2 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"neg?"
0 0 2 3 1 #" "
0 0 14 3 4 #"sign"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 23 3 1 #"("
0 0 15 3 3 #"let"
0 0 2 3 1 #" "
0 0 23 3 1 #"["
0 0 14 3 1 #"N"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"int"
0 0 2 3 1 #" "
0 0 14 3 1 #"N"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 14 #"              "
0 0 14 3 3 #"N-1"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"dec"
0 0 2 3 1 #" "
0 0 14 3 1 #"N"
0 0 23 3 2 #")]"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 17 #"swap-array-elems!"
0 0 2 3 1 #" "
0 0 14 3 1 #"p"
0 0 2 3 1 #" "
0 0 21 3 1 #"1"
0 0 2 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"loop"
0 0 2 3 1 #" "
0 0 23 3 1 #"["
0 0 14 3 1 #"i"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"int"
0 0 2 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 2 #")]"
0 0 2 29 1 #"\n"
0 0 2 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"=="
0 0 2 3 1 #" "
0 0 14 3 1 #"i"
0 0 2 3 1 #" "
0 0 14 3 1 #"N"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 18 #"                  "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 14 #"              "
0 0 23 3 1 #"("
0 0 15 3 3 #"let"
0 0 2 3 1 #" "
0 0 23 3 1 #"["
0 0 14 3 2 #"cx"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"aget"
0 0 2 3 1 #" "
0 0 14 3 1 #"c"
0 0 2 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 23 #"                       "
0 0 14 3 3 #"i+1"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"inc"
0 0 2 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #")]"
0 0 2 29 1 #"\n"
0 0 2 3 16 #"                "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"not="
0 0 2 3 1 #" "
0 0 14 3 2 #"cx"
0 0 2 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 20 #"                    "
0 0 23 3 1 #"("
0 0 15 3 2 #"do"
0 0 2 29 1 #"\n"
0 0 2 3 24 #"                        "
0 0 23 3 1 #"("
0 0 14 3 4 #"aset"
0 0 2 3 1 #" "
0 0 14 3 1 #"c"
0 0 2 3 1 #" "
0 0 14 3 1 #"i"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"dec"
0 0 2 3 1 #" "
0 0 14 3 2 #"cx"
0 0 23 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 22 #"                      "
0 0 14 3 4 #"true"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 20 #"                    "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"=="
0 0 2 3 1 #" "
0 0 14 3 1 #"i"
0 0 2 3 1 #" "
0 0 14 3 3 #"N-1"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 24 #"                        "
0 0 14 3 5 #"false"
0 0 2 29 1 #"\n"
0 0 2 3 24 #"                        "
0 0 23 3 1 #"("
0 0 15 3 2 #"do"
0 0 2 29 1 #"\n"
0 0 2 3 28 #"                            "
0 0 23 3 1 #"("
0 0 14 3 4 #"aset"
0 0 2 3 1 #" "
0 0 14 3 1 #"c"
0 0 2 3 1 #" "
0 0 14 3 1 #"i"
0 0 2 3 1 #" "
0 0 14 3 3 #"i+1"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 26 #"                          "
0 0 23 3 1 #"("
0 0 14 3 20 #"rotate-left-first-n!"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"inc"
0 0 2 3 1 #" "
0 0 14 3 3 #"i+1"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 26 #"                          "
0 0 23 3 1 #"("
0 0 15 3 5 #"recur"
0 0 2 3 1 #" "
0 0 14 3 3 #"i+1"
0 0 23 3 7 #")))))))"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 17 3 18 #";; else sign is +1"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 17 #"swap-array-elems!"
0 0 2 3 1 #" "
0 0 14 3 1 #"p"
0 0 2 3 1 #" "
0 0 21 3 1 #"0"
0 0 2 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 3 #")))"
0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 37 #"; (-> exact-nonnegative-integer? perm"
0 0 17 3 6 #"? perm"
0 0 17 3 2 #"?)"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"next-permutation"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 2 #"pp"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 2 #";("
0 0 17 3 6 #"printf"
0 0 17 3 1 #" "
0 0 17 3 1 #"\""
0 0 17 3 4 #"\\n\")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 19 3 1 #" "
0 0 23 3 1 #"["
0 0 14 3 9 #"negative?"
0 0 19 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"perm-s"
0 0 19 3 1 #" "
0 0 14 3 2 #"pp"
0 0 23 3 2 #")]"
0 0 19 3 6 #"      "
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 23 3 1 #"("
0 0 15 3 3 #"let"
0 0 19 3 1 #" "
0 0 23 3 2 #"(["
0 0 14 3 3 #"ppn"
0 0 19 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"swap-at-indices"
0 0 19 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"perm-p"
0 0 19 3 1 #" "
0 0 14 3 2 #"pp"
0 0 23 3 1 #")"
0 0 19 3 1 #" "
0 0 21 3 1 #"1"
0 0 19 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 3 #")])"
0 0 19 3 8 #"        "
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"np-iter"
0 0 19 3 1 #" "
0 0 14 3 1 #"i"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"   "
0 0 17 3 8 #";       "
0 0 17 3 1 #"("
0 0 17 3 6 #"printf"
0 0 17 3 1 #" "
0 0 17 3 14 #"\"~a\\t~a\\t~a\\t\""
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"perm-c"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"i"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 8 #"list-ref"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"perm-c"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 3 #"i))"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 23 3 2 #"[("
0 0 14 3 1 #"="
0 0 19 3 1 #" "
0 0 14 3 1 #"i"
0 0 19 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"perm"
0 0 19 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"perm-p"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 19 3 1 #" "
0 0 21 3 1 #"1"
0 0 19 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"perm-c"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #"))]"
0 0 19 3 1 #" "
0 0 17 3 30 #"; return (new perm, old count)"
0 0 19 29 1 #"\n"
0 0 19 3 16 #"                "
0 0 23 3 2 #"[("
0 0 14 3 3 #"not"
0 0 19 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 19 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 19 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"perm-c"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 19 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 2 #"))"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 17 #"                 "
0 0 23 3 1 #"("
0 0 15 3 5 #"begin"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 17 3 16 #";               "
0 0 17 3 1 #"("
0 0 17 3 6 #"printf"
0 0 17 3 1 #" "
0 0 17 3 1 #"\""
0 0 17 3 2 #"!="
0 0 17 3 1 #" "
0 0 17 3 1 #"c"
0 0 17 3 1 #"["
0 0 17 3 1 #"i"
0 0 17 3 1 #"]"
0 0 17 3 6 #" 1\\n\")"
0 0 19 29 1 #"\n"
0 0 19 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 4 #"perm"
0 0 19 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"perm-p"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 19 3 1 #" "
0 0 21 3 1 #"1"
0 0 19 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 13 #"sub1-at-index"
0 0 19 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"perm-c"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 4 #")))]"
0 0 19 3 1 #" "
0 0 17 3 55 #"; sub1 from count index j, return (new perm, new count)"
0 0 19 29 1 #"\n"
0 0 19 3 16 #"                "
0 0 23 3 2 #"[("
0 0 14 3 1 #"="
0 0 19 3 1 #" "
0 0 14 3 1 #"i"
0 0 19 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 19 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 21 3 2 #"#f"
0 0 23 3 1 #"]"
0 0 19 3 1 #" "
0 0 17 3 22 #"; no more permutations"
0 0 19 29 1 #"\n"
0 0 19 3 16 #"                "
0 0 23 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 17 #"                 "
0 0 23 3 1 #"("
0 0 15 3 3 #"let"
0 0 19 3 1 #" "
0 0 23 3 2 #"(["
0 0 14 3 3 #"i+1"
0 0 19 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"add1"
0 0 19 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 3 #")])"
0 0 19 3 24 #"                        "
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 17 3 1 #";"
0 0 17 3 14 #"              "
0 0 17 3 1 #"("
0 0 17 3 6 #"printf"
0 0 17 3 1 #" "
0 0 17 3 1 #"\""
0 0 17 3 8 #"else\\n\")"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 7 #"np-iter"
0 0 25 3 1 #" "
0 0 14 3 3 #"i+1"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"perm"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 19 #"rotate-left-first-n"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"perm-p"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"add1"
0 0 25 3 1 #" "
0 0 14 3 3 #"i+1"
0 0 23 3 2 #"))"
0 0 25 3 1 #" "
0 0 21 3 1 #"1"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"set-at-index"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"perm-c"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 3 #"i+1"
0 0 23 3 7 #"))))]))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 7 #"np-iter"
0 0 25 3 1 #" "
0 0 21 3 1 #"2"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"perm"
0 0 25 3 1 #" "
0 0 14 3 3 #"ppn"
0 0 25 3 1 #" "
0 0 21 3 1 #"1"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"perm-c"
0 0 25 3 1 #" "
0 0 14 3 2 #"pp"
0 0 23 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 4 #"perm"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"swap-at-indices"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"perm-p"
0 0 25 3 1 #" "
0 0 14 3 2 #"pp"
0 0 23 3 1 #")"
0 0 25 3 1 #" "
0 0 21 3 1 #"0"
0 0 25 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 25 3 1 #" "
0 0 21 3 2 #"-1"
0 0 25 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"perm-c"
0 0 25 3 1 #" "
0 0 14 3 2 #"pp"
0 0 23 3 4 #"))))"
0           0
